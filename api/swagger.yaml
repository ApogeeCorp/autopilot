---
swagger: "2.0"
info:
  description: "libopenstorage autopilot API"
  version: "1.0.0"
  title: "autopilot"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:9000"
schemes:
- "http"
security:
- basicAuth: []
paths:
  /collectors:
    get:
      tags:
      - "collector"
      summary: "Get a list of telemetry collectors"
      description: "Returns an array of telemetry collectors defined in the system"
      operationId: "collectorList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Collector"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "collector"
      summary: "Create a new telemetry collector"
      description: "Create a new telemetry collector from the provided definition"
      operationId: "collectorCreate"
      parameters:
      - in: "body"
        name: "collector"
        description: "The collector to create"
        required: true
        schema:
          $ref: "#/definitions/Collector"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Collector"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /collectors/{collector_id}:
    get:
      tags:
      - "collector"
      summary: "Get a list of telemetry collectors"
      description: "Returns the request collected object"
      operationId: "collectorGet"
      parameters:
      - name: "collector_id"
        in: "path"
        description: "The id of the collector"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Collector"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "collector"
      summary: "Update a collector object"
      description: "Update the properties of the specified collector"
      operationId: "collectorUpdate"
      parameters:
      - name: "collector_id"
        in: "path"
        description: "The id of the collector"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "collector"
        description: "The collector to create"
        required: true
        schema:
          $ref: "#/definitions/Collector"
      responses:
        204:
          description: "No Content"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "collector"
      summary: "Get a list of telemetry collectors"
      description: "Returns the request collected object"
      operationId: "collectorDelete"
      parameters:
      - name: "collector_id"
        in: "path"
        description: "The id of the collector"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "No Content"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /sources:
    get:
      tags:
      - "source"
      summary: "Get a list of telemetry sources"
      description: "Returns an array of telemetry sources defined in the system"
      operationId: "sourceList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Source"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "source"
      summary: "Create a new telemetry source"
      description: "Create a new telemetry source from the provided definition"
      operationId: "sourceCreate"
      parameters:
      - in: "body"
        name: "source"
        description: "The source to create"
        required: true
        schema:
          $ref: "#/definitions/Source"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Source"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /sources/{source_id}:
    get:
      tags:
      - "source"
      summary: "Get a list of telemetry sources"
      description: "Returns the request collected object"
      operationId: "sourceGet"
      parameters:
      - name: "source_id"
        in: "path"
        description: "The id of the source"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Source"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "source"
      summary: "Update a source object"
      description: "Update the properties of the specified source"
      operationId: "sourceUpdate"
      parameters:
      - name: "source_id"
        in: "path"
        description: "The id of the source"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "source"
        description: "The source to create"
        required: true
        schema:
          $ref: "#/definitions/Source"
      responses:
        204:
          description: "No Content"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "source"
      summary: "Get a list of telemetry sources"
      description: "Returns the request collected object"
      operationId: "sourceDelete"
      parameters:
      - name: "source_id"
        in: "path"
        description: "The id of the source"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "No Content"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /samples:
    get:
      tags:
      - "sample"
      summary: "Get a list of telemetry samples"
      description: "Returns an array of telemetry samples defined in the system"
      operationId: "sampleList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sample"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "sample"
      summary: "Create a new telemetry sample"
      description: "Create a new telemetry sample from the provided definition"
      operationId: "sampleCreate"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "sample"
        in: "formData"
        description: "The sample to create"
        required: true
        type: "file"
      - name: "provider"
        in: "query"
        description: "The provider to process the sample with"
        required: false
        type: "string"
        default: "prometheus"
        enum:
        - "prometheus"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Sample"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /samples/{sample_id}:
    get:
      tags:
      - "sample"
      summary: "Get a list of telemetry samples"
      description: "Returns the request collected object"
      operationId: "sampleGet"
      parameters:
      - name: "sample_id"
        in: "path"
        description: "The id of the sample"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Sample"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "sample"
      summary: "Update a sample object"
      description: "Update the properties of the specified sample"
      operationId: "sampleUpdate"
      parameters:
      - name: "sample_id"
        in: "path"
        description: "The id of the sample"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "sample"
        description: "The sample to create"
        required: true
        schema:
          $ref: "#/definitions/Sample"
      responses:
        204:
          description: "No Content"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "sample"
      summary: "Get a list of telemetry samples"
      description: "Returns the request collected object"
      operationId: "sampleDelete"
      parameters:
      - name: "sample_id"
        in: "path"
        description: "The id of the sample"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "No Content"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /samples/{sample_id}/recommendations:
    get:
      tags:
      - "sample"
      summary: "Get a list of recommendations"
      description: "Returns the recommendations for a particular sample"
      operationId: "recommendationsGet"
      parameters:
      - name: "sample_id"
        in: "path"
        description: "The id of the sample"
        required: true
        type: "string"
        format: "uuid"
      - name: "rules"
        in: "query"
        description: "The rules to apply to get the recommendations"
        required: false
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Recommendation"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /rules:
    get:
      tags:
      - "rule"
      summary: "Get a list of telemetry rules"
      description: "Returns an array of telemetry rules defined in the system"
      operationId: "ruleList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Rule"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "rule"
      summary: "Create a new telemetry rule"
      description: "Create a new telemetry rule from the provided definition"
      operationId: "ruleCreate"
      parameters:
      - in: "body"
        name: "rule"
        description: "The rule to create"
        required: true
        schema:
          $ref: "#/definitions/Rule"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Rule"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /rules/{rule_id}:
    get:
      tags:
      - "rule"
      summary: "Get a list of telemetry rules"
      description: "Returns the request collected object"
      operationId: "ruleGet"
      parameters:
      - name: "rule_id"
        in: "path"
        description: "The id of the rule"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Rule"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "rule"
      summary: "Update a rule object"
      description: "Update the properties of the specified rule"
      operationId: "ruleUpdate"
      parameters:
      - name: "rule_id"
        in: "path"
        description: "The id of the rule"
        required: true
        type: "string"
        format: "uuid"
      - in: "body"
        name: "rule"
        description: "The rule to create"
        required: true
        schema:
          $ref: "#/definitions/RuleSet"
      responses:
        204:
          description: "No Content"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "rule"
      summary: "Get a list of telemetry rules"
      description: "Returns the request collected object"
      operationId: "ruleDelete"
      parameters:
      - name: "rule_id"
        in: "path"
        description: "The id of the rule"
        required: true
        type: "string"
        format: "uuid"
      responses:
        204:
          description: "No Content"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /tasks:
    get:
      tags:
      - "task"
      summary: "Get a list of tasks"
      description: "Returns an array of tasks"
      operationId: "taskList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /tasks/{task_id}:
    get:
      tags:
      - "task"
      summary: "Get a task"
      description: "Returns the request task object"
      operationId: "taskGet"
      parameters:
      - name: "task_id"
        in: "path"
        description: "The id of the task"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "NotFound"
          examples:
            application/json:
              message: "object not found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Collector:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The collector id"
      source_id:
        type: "string"
        format: "uuid"
        description: "The source id the source this collector will use"
      params:
        $ref: "#/definitions/JSONMap"
      interval:
        type: "string"
        description: "The interval the collector will run at"
    description: "A collector pulls data from a telemetry source, parses, \nand reformats\
      \ the data to be consumed by the autopilot engine.\n"
    example:
      interval: "interval"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      source_id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      params: {}
  Task:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The task id"
      type:
        type: "string"
        description: "The task type"
        enum:
        - "collector"
        - "recommender"
        - "predictor"
      params:
        type: "object"
        description: "The parameters to pass to the source"
        additionalProperties:
          type: "object"
          properties: {}
      run_at:
        type: "string"
        format: "date-time"
        description: "The timestamp the next execution of the task"
      status:
        type: "string"
        description: "The task status"
        enum:
        - "pending"
        - "running"
        - "succeeded"
        - "failed"
    description: "A task is a scheduled operation in the engine\n"
    example:
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      run_at: "2000-01-23T04:56:07.000+00:00"
      type: "collector"
      params:
        key: "{}"
      status: "pending"
  SourceProvider:
    type: "string"
    description: "SourceProvider:\n  * prometheus - a prometheus server\n"
    enum:
    - "prometheus"
  Source:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The source id"
      name:
        type: "string"
        description: "The source name"
      type:
        $ref: "#/definitions/SourceProvider"
      config:
        $ref: "#/definitions/JSONMap"
    description: "A source is a telemetry source that provides stats and anlytics\
      \ data in the autopilot csv format\n"
    example:
      name: "name"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      type: {}
      config: {}
  Sample:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The sample id"
      source:
        $ref: "#/definitions/SourceProvider"
      created_at:
        type: "string"
        format: "date-time"
        description: "The timestamp for the sample"
      meta:
        $ref: "#/definitions/JSONMap"
    description: "A sample is a set of collected data from a particular source that\
      \ has be reformatted\nand prepared for consumption. The sample data itself is\
      \ stored in the filesystem.\n"
    example:
      meta: {}
      created_at: "2000-01-23T04:56:07.000+00:00"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      source: {}
  Rule:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The rule id"
      name:
        type: "string"
        description: "the rule description"
      expr:
        type: "string"
        example: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
        description: "The expression to match"
      for:
        type: "integer"
        format: "int64"
        example: 3600
        description: "The duration/interval the expression must be valid for in seconds"
      issue:
        type: "string"
        example: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is\
          \ high."
        description: "The issue template"
      severity:
        type: "string"
        enum:
        - "warning"
        - "error"
        - "critical"
      proposal:
        type: "string"
        example: "Add additional storage node to {{$labels.cluster}}"
        description: "The proposal template"
    description: "An proposal is a recommended solution that matches a certain constraint\n"
    example:
      severity: "warning"
      proposal: "Add additional storage node to {{$labels.cluster}}"
      issue: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high."
      name: "name"
      for: 3600
      expr: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  RuleSet:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The ruleset id"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/Rule"
    description: "A rule is a yaml rule set to executed by the recommendation engine\n"
    example:
      rules:
      - severity: "warning"
        proposal: "Add additional storage node to {{$labels.cluster}}"
        issue: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is\
          \ high."
        name: "name"
        for: 3600
        expr: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      - severity: "warning"
        proposal: "Add additional storage node to {{$labels.cluster}}"
        issue: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is\
          \ high."
        name: "name"
        for: 3600
        expr: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
        id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  Recommendation:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The recommendation id"
      sample_id:
        type: "string"
        format: "uuid"
        description: "The sample id"
      proposals:
        type: "object"
        description: "The recommendation values mapping"
        additionalProperties:
          type: "object"
          properties: {}
    description: "A recommendation is a list of recommended arbitrations for a specific\
      \ sample set\n"
    example:
      sample_id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      proposals:
        key: "{}"
  JSONMap:
    type: "object"
    description: "json data object"
    additionalProperties:
      type: "object"
      properties: {}
    x-go-type:
      type: "Params"
      import:
        package: "gitlab.com/ModelRocket/sparks/types"
        alias: "sparks"
    x-nullable: true
    x-omitempty: true
  Error:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The error code"
        x-nullable: true
      message:
        type: "string"
        description: "The error message"
      detail:
        type: "object"
        description: "The error details"
        additionalProperties:
          type: "string"
        x-omitempty: true
        x-nullable: true
    description: "Common Error Model"
responses:
  NotFound:
    description: "NotFound"
    examples:
      application/json:
        message: "object not found"
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "Unauthorized"
    examples:
      application/json:
        message: "access denied"
    schema:
      $ref: "#/definitions/Error"
  BadRequest:
    description: "BadRequest"
    examples:
      application/json:
        message: "invalid parameter"
    schema:
      $ref: "#/definitions/Error"
  ServerError:
    description: "ServerError"
    examples:
      application/json:
        message: "internal server error"
    schema:
      $ref: "#/definitions/Error"
