---
swagger: "2.0"
info:
  description: "libopenstorage autopilot API"
  version: "1.0.0"
  title: "autopilot"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:9000"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []
paths:
  /collectors:
    get:
      tags:
      - "collector"
      summary: "Get a list of telemetry collectors"
      description: "Returns an array of telemetry collectors defined in the system"
      operationId: "collectorList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Collector"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /emitters:
    get:
      tags:
      - "emitter"
      summary: "Get a list of telemetry emitters"
      description: "Returns an array of telemetry emitters defined in the system"
      operationId: "emitterList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Emitter"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /recommend:
    post:
      tags:
      - "recommend"
      summary: "Create a new telemetry sample"
      description: "Create a new telemetry sample from the provided definition"
      operationId: "recommendationsGet"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "sample"
        in: "formData"
        description: "The sample to create"
        required: true
        type: "file"
      - name: "type"
        in: "query"
        description: "The provider type to process the sample with"
        required: false
        type: "string"
        default: "prometheus"
        enum:
        - "prometheus"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Recommendation"
        400:
          description: "BadRequest"
          examples:
            application/json:
              message: "invalid parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /rules:
    get:
      tags:
      - "rule"
      summary: "Get a list of telemetry rules"
      description: "Returns an array of telemetry rules defined in the system"
      operationId: "ruleList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Rule"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
  /tasks:
    get:
      tags:
      - "task"
      summary: "Get a list of tasks"
      description: "Returns an array of tasks"
      operationId: "taskList"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        500:
          description: "ServerError"
          examples:
            application/json:
              message: "internal server error"
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Collector:
    properties:
      name:
        type: "string"
        description: "The collector name"
      type:
        type: "string"
        description: "The collector client to use"
        enum:
        - "prometheus"
      url:
        type: "string"
        description: "The collector url"
      params:
        type: "object"
        description: "json data object"
        additionalProperties:
          type: "object"
          properties: {}
      interval:
        type: "string"
        description: "The interval the collector will run at"
      emitters:
        type: "array"
        description: "The emitters to use after processing the samples"
        items:
          type: "string"
    description: "A collector pulls data from a telemetry source, parses, \nand reformats\
      \ the data to be consumed by the autopilot engine.\n"
    example:
      emitters:
      - "emitters"
      - "emitters"
      name: "name"
      interval: "interval"
      type: "prometheus"
      params:
        key: "{}"
      url: "url"
  Emitter:
    properties:
      name:
        type: "string"
        description: "The emitter name"
      type:
        type: "string"
        description: "The emitter type"
        enum:
        - "mqtt"
      params:
        type: "object"
        description: "json data object"
        additionalProperties:
          type: "object"
          properties: {}
    description: "An emitter emits recommendations to a system\n"
    example:
      name: "name"
      type: "mqtt"
      params:
        key: "{}"
  Task:
    properties:
      id:
        type: "string"
        format: "uuid"
        description: "The task id"
      type:
        type: "string"
        description: "The task type"
        enum:
        - "collector"
      params:
        type: "object"
        description: "The parameters to pass to the source"
        additionalProperties:
          type: "object"
          properties: {}
      run_at:
        type: "string"
        format: "date-time"
        description: "The timestamp the next execution of the task"
      status:
        type: "string"
        description: "The task status"
        enum:
        - "pending"
        - "running"
        - "succeeded"
        - "failed"
    description: "A task is a scheduled operation in the engine\n"
    example:
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      run_at: "2000-01-23T04:56:07.000+00:00"
      type: "collector"
      params:
        key: "{}"
      status: "pending"
  Rule:
    properties:
      name:
        type: "string"
        description: "the rule description"
      expr:
        type: "string"
        example: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
        description: "The expression to match"
      for:
        type: "integer"
        format: "int64"
        example: 3600
        description: "The duration/interval the expression must be valid for in seconds"
      issue:
        type: "string"
        example: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is\
          \ high."
        description: "The issue template"
      severity:
        type: "string"
        enum:
        - "warning"
        - "error"
        - "critical"
      proposal:
        type: "string"
        example: "Add additional storage node to {{$labels.cluster}}"
        description: "The proposal template"
    description: "An proposal is a recommended solution that matches a certain constraint\n"
    example:
      severity: "warning"
      proposal: "Add additional storage node to {{$labels.cluster}}"
      issue: "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high."
      name: "name"
      for: 3600
      expr: "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) > 80"
  Proposal:
    properties:
      rule:
        type: "string"
        description: "The rule that triggered the proposal"
      cluster_id:
        type: "string"
        description: "The cluster id"
      node_id:
        type: "string"
        description: "The node id"
      volume_id:
        type: "string"
        description: "the volume id"
      value:
        type: "string"
        description: "The proposal value"
    description: "A proposal is a formatted propsal object\n"
    example:
      cluster_id: "cluster_id"
      volume_id: "volume_id"
      rule: "rule"
      value: "value"
      node_id: "node_id"
  Recommendation:
    properties:
      timestamp:
        type: "string"
        format: "date-time"
        description: "The recommendation timestamp"
      proposals:
        type: "array"
        description: "The recommendation values mapping rule.name -> formatted proposal"
        items:
          $ref: "#/definitions/Proposal"
    description: "A recommendation is a list of recommended arbitrations to be emitted\
      \ by the system\n"
    example:
      proposals:
      - cluster_id: "cluster_id"
        volume_id: "volume_id"
        rule: "rule"
        value: "value"
        node_id: "node_id"
      - cluster_id: "cluster_id"
        volume_id: "volume_id"
        rule: "rule"
        value: "value"
        node_id: "node_id"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Error:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The error code"
        x-nullable: true
      message:
        type: "string"
        description: "The error message"
      detail:
        type: "object"
        description: "The error details"
        additionalProperties:
          type: "string"
        x-omitempty: true
        x-nullable: true
    description: "Common Error Model"
responses:
  NotFound:
    description: "NotFound"
    examples:
      application/json:
        message: "object not found"
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: "Unauthorized"
    examples:
      application/json:
        message: "access denied"
    schema:
      $ref: "#/definitions/Error"
  BadRequest:
    description: "BadRequest"
    examples:
      application/json:
        message: "invalid parameter"
    schema:
      $ref: "#/definitions/Error"
  ServerError:
    description: "ServerError"
    examples:
      application/json:
        message: "internal server error"
    schema:
      $ref: "#/definitions/Error"
