// Code generated by hiro; DO NOT EDIT.

//
//  MODEL ROCKET LLC CONFIDENTIAL
//  _________________
//   Copyright (c) 2018 - 2019 MODEL ROCKET LLC
//   All Rights Reserved.
//
//   NOTICE:  All information contained herein is, and remains
//   the property of MODEL ROCKET LLC and its suppliers,
//   if any.  The intellectual and technical concepts contained
//   herein are proprietary to MODEL ROCKET LLC
//   and its suppliers and may be covered by U.S. and Foreign Patents,
//   patents in process, and are protected by trade secret or copyright law.
//   Dissemination of this information or reproduction of this material
//   is strictly forbidden unless prior written permission is obtained
//   from MODEL ROCKET LLC.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SourceListHandlerFunc turns a function with the right signature into a source list handler
type SourceListHandlerFunc func(SourceListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SourceListHandlerFunc) Handle(params SourceListParams) middleware.Responder {
	return fn(params)
}

// SourceListHandler interface for that can handle valid source list params
type SourceListHandler interface {
	Handle(SourceListParams) middleware.Responder
}

// NewSourceList creates a new http.Handler for the source list operation
func NewSourceList(ctx *middleware.Context, handler SourceListHandler) *SourceList {
	return &SourceList{Context: ctx, Handler: handler}
}

/*SourceList swagger:route GET /sources sourceList

Get a list of telemetry sources

Returns an array of telemetry sources defined in the system

*/
type SourceList struct {
	Context *middleware.Context
	Handler SourceListHandler
}

func (o *SourceList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSourceListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
