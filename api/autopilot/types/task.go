// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task A task is a scheduled operation in the engine
//
// swagger:model Task
type Task struct {

	// The task id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The parameters to pass to the source
	Params map[string]interface{} `json:"params,omitempty"`

	// The timestamp the next execution of the task
	// Format: date-time
	RunAt strfmt.DateTime `json:"run_at,omitempty"`

	// The task status
	// Enum: [pending running succeeded failed]
	Status string `json:"status,omitempty"`

	// The task type
	// Enum: [collector]
	Type string `json:"type,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateRunAt(formats strfmt.Registry) error {

	if swag.IsZero(m.RunAt) { // not required
		return nil
	}

	if err := validate.FormatOf("run_at", "body", "date-time", m.RunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","succeeded","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStatusPropEnum = append(taskTypeStatusPropEnum, v)
	}
}

const (

	// TaskStatusPending captures enum value "pending"
	TaskStatusPending string = "pending"

	// TaskStatusRunning captures enum value "running"
	TaskStatusRunning string = "running"

	// TaskStatusSucceeded captures enum value "succeeded"
	TaskStatusSucceeded string = "succeeded"

	// TaskStatusFailed captures enum value "failed"
	TaskStatusFailed string = "failed"
)

// prop value enum
func (m *Task) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var taskTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["collector"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeTypePropEnum = append(taskTypeTypePropEnum, v)
	}
}

const (

	// TaskTypeCollector captures enum value "collector"
	TaskTypeCollector string = "collector"
)

// prop value enum
func (m *Task) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
