// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SourceType sourceType:
//   * prometheus - a prometheus server
//
// swagger:model SourceType
type SourceType string

type SourceTypeScalar int

var (

	// SourceTypePrometheus captures enum value "prometheus"
	SourceTypePrometheus SourceType = "prometheus"

	SourceTypeScalarLookup = map[SourceType]SourceTypeScalar{

		SourceTypePrometheus: SourceTypePrometheusScalar,
	}
)

const (
	SourceTypePrometheusScalar SourceTypeScalar = 0
)

func (m SourceType) ScalarValue() SourceTypeScalar {
	return SourceTypeScalarLookup[m]
}

// for schema
var sourceTypeEnum []interface{}

func init() {
	var res []SourceType
	if err := json.Unmarshal([]byte(`["prometheus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceTypeEnum = append(sourceTypeEnum, v)
	}
}

func (m SourceType) validateSourceTypeEnum(path, location string, value SourceType) error {
	if err := validate.Enum(path, location, value, sourceTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this source type
func (m SourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
