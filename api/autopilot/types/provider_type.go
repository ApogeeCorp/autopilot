// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ProviderType Provider types
// swagger:model ProviderType
type ProviderType string

type ProviderTypeScalar int

var (

	// ProviderTypePrometheus captures enum value "Prometheus"
	ProviderTypePrometheus ProviderType = "Prometheus"

	// ProviderTypeOpenStorage captures enum value "OpenStorage"
	ProviderTypeOpenStorage ProviderType = "OpenStorage"

	// ProviderTypeAutoPilot captures enum value "AutoPilot"
	ProviderTypeAutoPilot ProviderType = "AutoPilot"

	ProviderTypeScalarLookup = map[ProviderType]ProviderTypeScalar{

		ProviderTypePrometheus: ProviderTypePrometheusScalar,

		ProviderTypeOpenStorage: ProviderTypeOpenStorageScalar,

		ProviderTypeAutoPilot: ProviderTypeAutoPilotScalar,
	}
)

const (
	ProviderTypePrometheusScalar ProviderTypeScalar = 0

	ProviderTypeOpenStorageScalar ProviderTypeScalar = 1

	ProviderTypeAutoPilotScalar ProviderTypeScalar = 2
)

func (m ProviderType) ScalarValue() ProviderTypeScalar {
	return ProviderTypeScalarLookup[m]
}

// for schema
var providerTypeEnum []interface{}

func init() {
	var res []ProviderType
	if err := json.Unmarshal([]byte(`["Prometheus","OpenStorage","AutoPilot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerTypeEnum = append(providerTypeEnum, v)
	}
}

func (m ProviderType) validateProviderTypeEnum(path, location string, value ProviderType) error {
	if err := validate.Enum(path, location, value, providerTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this provider type
func (m ProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProviderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
