// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rule An rule is a contraint expression that checked in the system against
//
// swagger:model Rule
type Rule struct {

	// The expression to match or query to make
	Expr string `json:"expr,omitempty"`

	// The duration/interval the expression must be valid for in seconds
	For int64 `json:"for,omitempty"`

	// The issue template
	Issue string `json:"issue,omitempty"`

	// the rule description
	Name string `json:"name,omitempty"`

	// The proposal template
	Proposal string `json:"proposal,omitempty"`

	// severity
	// Enum: [warning error critical]
	Severity string `json:"severity,omitempty"`

	// type
	Type RuleType `json:"type,omitempty"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ruleTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["warning","error","critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ruleTypeSeverityPropEnum = append(ruleTypeSeverityPropEnum, v)
	}
}

const (

	// RuleSeverityWarning captures enum value "warning"
	RuleSeverityWarning string = "warning"

	// RuleSeverityError captures enum value "error"
	RuleSeverityError string = "error"

	// RuleSeverityCritical captures enum value "critical"
	RuleSeverityCritical string = "critical"
)

// prop value enum
func (m *Rule) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ruleTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Rule) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *Rule) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
