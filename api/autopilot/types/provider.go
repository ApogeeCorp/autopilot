// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Provider A provider defines a provider configuration
//
// swagger:discriminator Provider type
type Provider interface {
	runtime.Validatable

	// The provider instance name
	Name() string
	SetName(string)

	// type
	Type() ProviderType
	SetType(ProviderType)
}

type provider struct {
	nameField string ``

	typeField ProviderType ``
}

// Name gets the name of this polymorphic type
func (m *provider) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *provider) SetName(val string) {
	m.nameField = val
}

// Type gets the type of this polymorphic type
func (m *provider) Type() ProviderType {
	return "Provider"
}

// SetType sets the type of this polymorphic type
func (m *provider) SetType(val ProviderType) {

}

// UnmarshalProviderSlice unmarshals polymorphic slices of Provider
func UnmarshalProviderSlice(reader io.Reader, consumer runtime.Consumer) ([]Provider, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Provider
	for _, element := range elements {
		obj, err := unmarshalProvider(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalProvider unmarshals polymorphic Provider
func UnmarshalProvider(reader io.Reader, consumer runtime.Consumer) (Provider, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalProvider(data, consumer)
}

func unmarshalProvider(data []byte, consumer runtime.Consumer) (Provider, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "Prometheus":
		var result Prometheus
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Provider":
		var result provider
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}

// Validate validates this provider
func (m *provider) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
