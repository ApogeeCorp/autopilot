// Code generated by go-swagger (hiro); DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Collector A collector pulls data from a telemetry provider, parses,
// and reformats the data to be consumed by the autopilot engine.
//
// swagger:model Collector
type Collector struct {

	// The collector id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// json data object
	Params map[string]interface{} `json:"params,omitempty"`

	// The telemetry provider for the collector
	// Enum: [prometheus]
	Provider string `json:"provider,omitempty"`
}

// Validate validates this collector
func (m *Collector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Collector) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var collectorTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["prometheus"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectorTypeProviderPropEnum = append(collectorTypeProviderPropEnum, v)
	}
}

const (

	// CollectorProviderPrometheus captures enum value "prometheus"
	CollectorProviderPrometheus string = "prometheus"
)

// prop value enum
func (m *Collector) validateProviderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, collectorTypeProviderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Collector) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Collector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Collector) UnmarshalBinary(b []byte) error {
	var res Collector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
