// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package rest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "libopenstorage autopilot API",
    "title": "autopilot",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:9000",
  "paths": {
    "/collectors": {
      "get": {
        "description": "Returns an array of telemetry collectors defined in the system",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collector"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/emitters": {
      "get": {
        "description": "Returns an array of telemetry emitters defined in the system",
        "tags": [
          "emitter"
        ],
        "summary": "Get a list of telemetry emitters",
        "operationId": "emitterList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Emitter"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/recommend": {
      "post": {
        "description": "Create a new telemetry sample from the provided definition and get recommendations",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Post a telemetry sample and get recommendations",
        "operationId": "recommendationsGet",
        "parameters": [
          {
            "type": "file",
            "description": "The sample to create",
            "name": "sample",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "The rules to apply",
            "name": "rules",
            "in": "formData"
          },
          {
            "enum": [
              "prometheus"
            ],
            "type": "string",
            "default": "prometheus",
            "description": "The provider type to process the sample with",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recommendation"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Returns an array of telemetry rules defined in the system",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/samples": {
      "get": {
        "description": "Returns an array of samples",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of samples stored on disk",
        "operationId": "sampleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sample"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/samples/{sample_id}": {
      "delete": {
        "description": "Delete a sample from the disk",
        "tags": [
          "sample"
        ],
        "summary": "Delete a sample",
        "operationId": "sampleDelete",
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The sample id",
          "name": "sample_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/tasks": {
      "get": {
        "description": "Returns an array of tasks",
        "tags": [
          "task"
        ],
        "summary": "Get a list of tasks",
        "operationId": "taskList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Collector": {
      "description": "A collector pulls data from a telemetry source, parses, \nand reformats the data to be consumed by the autopilot engine.\n",
      "properties": {
        "emitters": {
          "description": "The emitters to use after processing the samples",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The collector name",
          "type": "string"
        },
        "schedule_interval": {
          "description": "The interval the collector will run at",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/CollectorType"
        },
        "url": {
          "description": "The collector url",
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "CollectorType": {
      "description": "Collector types",
      "type": "string",
      "enum": [
        "PrometheusCollector"
      ]
    },
    "Emitter": {
      "description": "An emitter emits recommendations to a system\n",
      "properties": {
        "name": {
          "description": "The emitter name",
          "type": "string"
        },
        "params": {
          "description": "json data object",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "The emitter type",
          "type": "string",
          "enum": [
            "mqtt"
          ]
        }
      }
    },
    "Error": {
      "description": "Common Error Model",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string",
          "x-nullable": true
        },
        "detail": {
          "description": "The error details",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true,
          "x-omitempty": true
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "PrometheusCollector": {
      "description": "Prometheus collector type",
      "allOf": [
        {
          "$ref": "#/definitions/Collector"
        },
        {
          "properties": {
            "query": {
              "description": "The query to run against the prometheus host",
              "type": "string",
              "example": "{cluster=\"greatdane-1914e166dc7\"}"
            },
            "sample_interval": {
              "description": "The sample size for the interval",
              "type": "string",
              "default": "24h"
            }
          }
        }
      ]
    },
    "Proposal": {
      "description": "A proposal is a formatted propsal object\n",
      "properties": {
        "action": {
          "description": "The proposed action to take to resolve the issue",
          "type": "string"
        },
        "cluster_id": {
          "description": "The cluster id",
          "type": "string"
        },
        "issue": {
          "description": "Issue from the rule that describes the reason for this proposal",
          "type": "string"
        },
        "node_id": {
          "description": "The node id",
          "type": "string"
        },
        "rule": {
          "description": "The rule that triggered the proposal",
          "type": "string"
        },
        "volume_id": {
          "description": "The volume id",
          "type": "string"
        }
      }
    },
    "Recommendation": {
      "description": "A recommendation is a list of recommended arbitrations to be emitted by the system\n",
      "properties": {
        "proposals": {
          "description": "The recommendation values mapping rule.name -\u003e formatted proposal",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proposal"
          }
        },
        "timestamp": {
          "description": "The recommendation timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Rule": {
      "description": "An proposal is a recommended solution that matches a certain constraint\n",
      "properties": {
        "expr": {
          "description": "The expression to match or query to make",
          "type": "string",
          "example": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80"
        },
        "for": {
          "description": "The duration/interval the expression must be valid for in seconds",
          "type": "integer",
          "format": "int64",
          "example": 3600
        },
        "issue": {
          "description": "The issue template",
          "type": "string",
          "example": "Portworx volume {{$labels.volume}} usage on {{$labels.host}} is high."
        },
        "name": {
          "description": "the rule description",
          "type": "string"
        },
        "proposal": {
          "description": "The proposal template",
          "type": "string",
          "example": "Add additional storage node to {{$labels.cluster}}"
        },
        "severity": {
          "type": "string",
          "enum": [
            "warning",
            "error",
            "critical"
          ]
        },
        "type": {
          "description": "the type of rule this is",
          "type": "string",
          "enum": [
            "prometheus",
            "sql",
            "anomaly"
          ]
        }
      }
    },
    "Sample": {
      "description": "A sample is a collected data sample\n",
      "properties": {
        "id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        },
        "path": {
          "description": "The sample path on disk",
          "type": "string"
        },
        "time": {
          "description": "The sample timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Task": {
      "description": "A task is a scheduled operation in the engine\n",
      "properties": {
        "id": {
          "description": "The task id",
          "type": "string",
          "format": "uuid"
        },
        "params": {
          "description": "The parameters to pass to the source",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "run_at": {
          "description": "The timestamp the next execution of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The task status",
          "type": "string",
          "enum": [
            "pending",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "type": {
          "description": "The task type",
          "type": "string",
          "enum": [
            "collector"
          ]
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "BadRequest",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "invalid parameter"
        }
      }
    },
    "NotFound": {
      "description": "NotFound",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "object not found"
        }
      }
    },
    "ServerError": {
      "description": "ServerError",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "internal server error"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "access denied"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "libopenstorage autopilot API",
    "title": "autopilot",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:9000",
  "paths": {
    "/collectors": {
      "get": {
        "description": "Returns an array of telemetry collectors defined in the system",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collector"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/emitters": {
      "get": {
        "description": "Returns an array of telemetry emitters defined in the system",
        "tags": [
          "emitter"
        ],
        "summary": "Get a list of telemetry emitters",
        "operationId": "emitterList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Emitter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/recommend": {
      "post": {
        "description": "Create a new telemetry sample from the provided definition and get recommendations",
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "Post a telemetry sample and get recommendations",
        "operationId": "recommendationsGet",
        "parameters": [
          {
            "type": "file",
            "description": "The sample to create",
            "name": "sample",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "The rules to apply",
            "name": "rules",
            "in": "formData"
          },
          {
            "enum": [
              "prometheus"
            ],
            "type": "string",
            "default": "prometheus",
            "description": "The provider type to process the sample with",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recommendation"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Returns an array of telemetry rules defined in the system",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples": {
      "get": {
        "description": "Returns an array of samples",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of samples stored on disk",
        "operationId": "sampleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sample"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples/{sample_id}": {
      "delete": {
        "description": "Delete a sample from the disk",
        "tags": [
          "sample"
        ],
        "summary": "Delete a sample",
        "operationId": "sampleDelete",
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "format": "uuid",
          "description": "The sample id",
          "name": "sample_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/tasks": {
      "get": {
        "description": "Returns an array of tasks",
        "tags": [
          "task"
        ],
        "summary": "Get a list of tasks",
        "operationId": "taskList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Collector": {
      "description": "A collector pulls data from a telemetry source, parses, \nand reformats the data to be consumed by the autopilot engine.\n",
      "properties": {
        "emitters": {
          "description": "The emitters to use after processing the samples",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The collector name",
          "type": "string"
        },
        "schedule_interval": {
          "description": "The interval the collector will run at",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/CollectorType"
        },
        "url": {
          "description": "The collector url",
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "CollectorType": {
      "description": "Collector types",
      "type": "string",
      "enum": [
        "PrometheusCollector"
      ]
    },
    "Emitter": {
      "description": "An emitter emits recommendations to a system\n",
      "properties": {
        "name": {
          "description": "The emitter name",
          "type": "string"
        },
        "params": {
          "description": "json data object",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "The emitter type",
          "type": "string",
          "enum": [
            "mqtt"
          ]
        }
      }
    },
    "Error": {
      "description": "Common Error Model",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string",
          "x-nullable": true
        },
        "detail": {
          "description": "The error details",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true,
          "x-omitempty": true
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "PrometheusCollector": {
      "description": "Prometheus collector type",
      "allOf": [
        {
          "$ref": "#/definitions/Collector"
        },
        {
          "properties": {
            "query": {
              "description": "The query to run against the prometheus host",
              "type": "string",
              "example": "{cluster=\"greatdane-1914e166dc7\"}"
            },
            "sample_interval": {
              "description": "The sample size for the interval",
              "type": "string",
              "default": "24h"
            }
          }
        }
      ]
    },
    "Proposal": {
      "description": "A proposal is a formatted propsal object\n",
      "properties": {
        "action": {
          "description": "The proposed action to take to resolve the issue",
          "type": "string"
        },
        "cluster_id": {
          "description": "The cluster id",
          "type": "string"
        },
        "issue": {
          "description": "Issue from the rule that describes the reason for this proposal",
          "type": "string"
        },
        "node_id": {
          "description": "The node id",
          "type": "string"
        },
        "rule": {
          "description": "The rule that triggered the proposal",
          "type": "string"
        },
        "volume_id": {
          "description": "The volume id",
          "type": "string"
        }
      }
    },
    "Recommendation": {
      "description": "A recommendation is a list of recommended arbitrations to be emitted by the system\n",
      "properties": {
        "proposals": {
          "description": "The recommendation values mapping rule.name -\u003e formatted proposal",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proposal"
          }
        },
        "timestamp": {
          "description": "The recommendation timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Rule": {
      "description": "An proposal is a recommended solution that matches a certain constraint\n",
      "properties": {
        "expr": {
          "description": "The expression to match or query to make",
          "type": "string",
          "example": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80"
        },
        "for": {
          "description": "The duration/interval the expression must be valid for in seconds",
          "type": "integer",
          "format": "int64",
          "example": 3600
        },
        "issue": {
          "description": "The issue template",
          "type": "string",
          "example": "Portworx volume {{$labels.volume}} usage on {{$labels.host}} is high."
        },
        "name": {
          "description": "the rule description",
          "type": "string"
        },
        "proposal": {
          "description": "The proposal template",
          "type": "string",
          "example": "Add additional storage node to {{$labels.cluster}}"
        },
        "severity": {
          "type": "string",
          "enum": [
            "warning",
            "error",
            "critical"
          ]
        },
        "type": {
          "description": "the type of rule this is",
          "type": "string",
          "enum": [
            "prometheus",
            "sql",
            "anomaly"
          ]
        }
      }
    },
    "Sample": {
      "description": "A sample is a collected data sample\n",
      "properties": {
        "id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        },
        "path": {
          "description": "The sample path on disk",
          "type": "string"
        },
        "time": {
          "description": "The sample timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Task": {
      "description": "A task is a scheduled operation in the engine\n",
      "properties": {
        "id": {
          "description": "The task id",
          "type": "string",
          "format": "uuid"
        },
        "params": {
          "description": "The parameters to pass to the source",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "run_at": {
          "description": "The timestamp the next execution of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The task status",
          "type": "string",
          "enum": [
            "pending",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "type": {
          "description": "The task type",
          "type": "string",
          "enum": [
            "collector"
          ]
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "BadRequest",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "invalid parameter"
        }
      }
    },
    "NotFound": {
      "description": "NotFound",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "object not found"
        }
      }
    },
    "ServerError": {
      "description": "ServerError",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "internal server error"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "access denied"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
}
