// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package rest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "libopenstorage autopilot API",
    "title": "autopilot",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:9000",
  "paths": {
    "/collectors": {
      "get": {
        "description": "Returns an array of telemetry collectors defined in the system",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collector"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry collector from the provided definition",
        "tags": [
          "collector"
        ],
        "summary": "Create a new telemetry collector",
        "operationId": "collectorCreate",
        "parameters": [
          {
            "description": "The collector to create",
            "name": "collector",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/collectors/{collector_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified collector",
        "tags": [
          "collector"
        ],
        "summary": "Update a collector object",
        "operationId": "collectorUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The collector to create",
            "name": "collector",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Returns an array of telemetry rules defined in the system",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry rule from the provided definition",
        "tags": [
          "rule"
        ],
        "summary": "Create a new telemetry rule",
        "operationId": "ruleCreate",
        "parameters": [
          {
            "description": "The rule to create",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/rules/{rule_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified rule",
        "tags": [
          "rule"
        ],
        "summary": "Update a rule object",
        "operationId": "ruleUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The rule to create",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples": {
      "get": {
        "description": "Returns an array of telemetry samples defined in the system",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sample"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry sample from the provided definition",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "sample"
        ],
        "summary": "Create a new telemetry sample",
        "operationId": "sampleCreate",
        "parameters": [
          {
            "type": "file",
            "description": "The sample to create",
            "name": "sample",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "prometheus"
            ],
            "type": "string",
            "default": "prometheus",
            "description": "The provider type to process the sample with",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples/{sample_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified sample",
        "tags": [
          "sample"
        ],
        "summary": "Update a sample object",
        "operationId": "sampleUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The sample to create",
            "name": "sample",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples/{sample_id}/recommendations": {
      "get": {
        "description": "Returns the recommendations for a particular sample",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of recommendations",
        "operationId": "recommendationsGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The rules to apply to get the recommendations",
            "name": "rules",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recommendation"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/sources": {
      "get": {
        "description": "Returns an array of telemetry sources defined in the system",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Source"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry source from the provided definition",
        "tags": [
          "source"
        ],
        "summary": "Create a new telemetry source",
        "operationId": "sourceCreate",
        "parameters": [
          {
            "description": "The source to create",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/sources/{source_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified source",
        "tags": [
          "source"
        ],
        "summary": "Update a source object",
        "operationId": "sourceUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The source to create",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "description": "Returns an array of tasks",
        "tags": [
          "task"
        ],
        "summary": "Get a list of tasks",
        "operationId": "taskList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}": {
      "get": {
        "description": "Returns the request task object",
        "tags": [
          "task"
        ],
        "summary": "Get a task",
        "operationId": "taskGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the task",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Collector": {
      "description": "A collector pulls data from a telemetry source, parses, \nand reformats the data to be consumed by the autopilot engine.\n",
      "properties": {
        "id": {
          "description": "The collector id",
          "type": "string",
          "format": "uuid"
        },
        "interval": {
          "description": "The interval the collector will run at",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/JSONMap"
        },
        "source_id": {
          "description": "The source id the source this collector will use",
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "interval": "interval",
        "params": {},
        "source_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      }
    },
    "Error": {
      "description": "Common Error Model",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string",
          "x-nullable": true
        },
        "detail": {
          "description": "The error details",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true,
          "x-omitempty": true
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "JSONMap": {
      "description": "json data object",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-type": {
        "import": {
          "alias": "sparks",
          "package": "gitlab.com/ModelRocket/sparks/types"
        },
        "type": "Params"
      },
      "x-nullable": true,
      "x-omitempty": true
    },
    "Recommendation": {
      "description": "A recommendation is a list of recommended arbitrations for a specific sample set\n",
      "properties": {
        "id": {
          "description": "The recommendation id",
          "type": "string",
          "format": "uuid"
        },
        "proposals": {
          "description": "The recommendation values mapping",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sample_id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "proposals": {
          "key": "{}"
        },
        "sample_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      }
    },
    "Rule": {
      "description": "An proposal is a recommended solution that matches a certain constraint\n",
      "properties": {
        "expr": {
          "description": "The expression to match",
          "type": "string",
          "example": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80"
        },
        "for": {
          "description": "The duration/interval the expression must be valid for in seconds",
          "type": "integer",
          "format": "int64",
          "example": 3600
        },
        "id": {
          "description": "The rule id",
          "type": "string",
          "format": "uuid"
        },
        "issue": {
          "description": "The issue template",
          "type": "string",
          "example": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high."
        },
        "name": {
          "description": "the rule description",
          "type": "string"
        },
        "proposal": {
          "description": "The proposal template",
          "type": "string",
          "example": "Add additional storage node to {{$labels.cluster}}"
        },
        "severity": {
          "type": "string",
          "enum": [
            "warning",
            "error",
            "critical"
          ]
        }
      },
      "example": {
        "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
        "for": 3600,
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
        "name": "name",
        "proposal": "Add additional storage node to {{$labels.cluster}}",
        "severity": "warning"
      }
    },
    "RuleSet": {
      "description": "A rule is a yaml rule set to executed by the recommendation engine\n",
      "properties": {
        "id": {
          "description": "The ruleset id",
          "type": "string",
          "format": "uuid"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "rules": [
          {
            "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
            "for": 3600,
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
            "name": "name",
            "proposal": "Add additional storage node to {{$labels.cluster}}",
            "severity": "warning"
          },
          {
            "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
            "for": 3600,
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
            "name": "name",
            "proposal": "Add additional storage node to {{$labels.cluster}}",
            "severity": "warning"
          }
        ]
      }
    },
    "Sample": {
      "description": "A sample is a set of collected data from a particular source that has be reformatted\nand prepared for consumption. The sample data itself is stored in the filesystem.\n",
      "properties": {
        "id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        },
        "meta": {
          "$ref": "#/definitions/JSONMap"
        },
        "type": {
          "$ref": "#/definitions/SourceType"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "meta": {},
        "type": {}
      }
    },
    "Source": {
      "description": "A source is a telemetry source that provides stats and anlytics data in the autopilot csv format\n",
      "properties": {
        "config": {
          "$ref": "#/definitions/JSONMap"
        },
        "id": {
          "description": "The source id",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The source name",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SourceType"
        }
      },
      "example": {
        "config": {},
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "name": "name",
        "type": {}
      }
    },
    "SourceType": {
      "description": "sourceType:\n  * prometheus - a prometheus server\n",
      "type": "string",
      "enum": [
        "prometheus"
      ]
    },
    "Task": {
      "description": "A task is a scheduled operation in the engine\n",
      "properties": {
        "id": {
          "description": "The task id",
          "type": "string",
          "format": "uuid"
        },
        "params": {
          "description": "The parameters to pass to the source",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "run_at": {
          "description": "The timestamp the next execution of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The task status",
          "type": "string",
          "enum": [
            "pending",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "type": {
          "description": "The task type",
          "type": "string",
          "enum": [
            "collector",
            "recommender",
            "predictor"
          ]
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "params": {
          "key": "{}"
        },
        "run_at": "2000-01-23T04:56:07.000+00:00",
        "status": "pending",
        "type": "collector"
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "BadRequest",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "invalid parameter"
        }
      }
    },
    "NotFound": {
      "description": "NotFound",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "object not found"
        }
      }
    },
    "ServerError": {
      "description": "ServerError",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "internal server error"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "access denied"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "libopenstorage autopilot API",
    "title": "autopilot",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:9000",
  "paths": {
    "/collectors": {
      "get": {
        "description": "Returns an array of telemetry collectors defined in the system",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collector"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry collector from the provided definition",
        "tags": [
          "collector"
        ],
        "summary": "Create a new telemetry collector",
        "operationId": "collectorCreate",
        "parameters": [
          {
            "description": "The collector to create",
            "name": "collector",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/collectors/{collector_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified collector",
        "tags": [
          "collector"
        ],
        "summary": "Update a collector object",
        "operationId": "collectorUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The collector to create",
            "name": "collector",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collector"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "collector"
        ],
        "summary": "Get a list of telemetry collectors",
        "operationId": "collectorDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the collector",
            "name": "collector_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/rules": {
      "get": {
        "description": "Returns an array of telemetry rules defined in the system",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry rule from the provided definition",
        "tags": [
          "rule"
        ],
        "summary": "Create a new telemetry rule",
        "operationId": "ruleCreate",
        "parameters": [
          {
            "description": "The rule to create",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/rules/{rule_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified rule",
        "tags": [
          "rule"
        ],
        "summary": "Update a rule object",
        "operationId": "ruleUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The rule to create",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "rule"
        ],
        "summary": "Get a list of telemetry rules",
        "operationId": "ruleDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the rule",
            "name": "rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples": {
      "get": {
        "description": "Returns an array of telemetry samples defined in the system",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sample"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry sample from the provided definition",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "sample"
        ],
        "summary": "Create a new telemetry sample",
        "operationId": "sampleCreate",
        "parameters": [
          {
            "type": "file",
            "description": "The sample to create",
            "name": "sample",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "prometheus"
            ],
            "type": "string",
            "default": "prometheus",
            "description": "The provider type to process the sample with",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples/{sample_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified sample",
        "tags": [
          "sample"
        ],
        "summary": "Update a sample object",
        "operationId": "sampleUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The sample to create",
            "name": "sample",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sample"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of telemetry samples",
        "operationId": "sampleDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/samples/{sample_id}/recommendations": {
      "get": {
        "description": "Returns the recommendations for a particular sample",
        "tags": [
          "sample"
        ],
        "summary": "Get a list of recommendations",
        "operationId": "recommendationsGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the sample",
            "name": "sample_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The rules to apply to get the recommendations",
            "name": "rules",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recommendation"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/sources": {
      "get": {
        "description": "Returns an array of telemetry sources defined in the system",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Source"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new telemetry source from the provided definition",
        "tags": [
          "source"
        ],
        "summary": "Create a new telemetry source",
        "operationId": "sourceCreate",
        "parameters": [
          {
            "description": "The source to create",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/sources/{source_id}": {
      "get": {
        "description": "Returns the request collected object",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the properties of the specified source",
        "tags": [
          "source"
        ],
        "summary": "Update a source object",
        "operationId": "sourceUpdate",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The source to create",
            "name": "source",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Returns the request collected object",
        "tags": [
          "source"
        ],
        "summary": "Get a list of telemetry sources",
        "operationId": "sourceDelete",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the source",
            "name": "source_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "description": "Returns an array of tasks",
        "tags": [
          "task"
        ],
        "summary": "Get a list of tasks",
        "operationId": "taskList",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}": {
      "get": {
        "description": "Returns the request task object",
        "tags": [
          "task"
        ],
        "summary": "Get a task",
        "operationId": "taskGet",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "The id of the task",
            "name": "task_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "invalid parameter"
              }
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "object not found"
              }
            }
          },
          "500": {
            "description": "ServerError",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "internal server error"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Collector": {
      "description": "A collector pulls data from a telemetry source, parses, \nand reformats the data to be consumed by the autopilot engine.\n",
      "properties": {
        "id": {
          "description": "The collector id",
          "type": "string",
          "format": "uuid"
        },
        "interval": {
          "description": "The interval the collector will run at",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/JSONMap"
        },
        "source_id": {
          "description": "The source id the source this collector will use",
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "interval": "interval",
        "params": {},
        "source_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      }
    },
    "Error": {
      "description": "Common Error Model",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string",
          "x-nullable": true
        },
        "detail": {
          "description": "The error details",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": true,
          "x-omitempty": true
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "JSONMap": {
      "description": "json data object",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-type": {
        "import": {
          "alias": "sparks",
          "package": "gitlab.com/ModelRocket/sparks/types"
        },
        "type": "Params"
      },
      "x-nullable": true,
      "x-omitempty": true
    },
    "Recommendation": {
      "description": "A recommendation is a list of recommended arbitrations for a specific sample set\n",
      "properties": {
        "id": {
          "description": "The recommendation id",
          "type": "string",
          "format": "uuid"
        },
        "proposals": {
          "description": "The recommendation values mapping",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sample_id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "proposals": {
          "key": "{}"
        },
        "sample_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      }
    },
    "Rule": {
      "description": "An proposal is a recommended solution that matches a certain constraint\n",
      "properties": {
        "expr": {
          "description": "The expression to match",
          "type": "string",
          "example": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80"
        },
        "for": {
          "description": "The duration/interval the expression must be valid for in seconds",
          "type": "integer",
          "format": "int64",
          "example": 3600
        },
        "id": {
          "description": "The rule id",
          "type": "string",
          "format": "uuid"
        },
        "issue": {
          "description": "The issue template",
          "type": "string",
          "example": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high."
        },
        "name": {
          "description": "the rule description",
          "type": "string"
        },
        "proposal": {
          "description": "The proposal template",
          "type": "string",
          "example": "Add additional storage node to {{$labels.cluster}}"
        },
        "severity": {
          "type": "string",
          "enum": [
            "warning",
            "error",
            "critical"
          ]
        }
      },
      "example": {
        "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
        "for": 3600,
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
        "name": "name",
        "proposal": "Add additional storage node to {{$labels.cluster}}",
        "severity": "warning"
      }
    },
    "RuleSet": {
      "description": "A rule is a yaml rule set to executed by the recommendation engine\n",
      "properties": {
        "id": {
          "description": "The ruleset id",
          "type": "string",
          "format": "uuid"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "rules": [
          {
            "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
            "for": 3600,
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
            "name": "name",
            "proposal": "Add additional storage node to {{$labels.cluster}}",
            "severity": "warning"
          },
          {
            "expr": "100 * (px_volume_usage_bytes / px_volume_capacity_bytes) \u003e 80",
            "for": 3600,
            "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
            "issue": "Portworx volume {{$labels.volumeid}} usage on {{$labels.host}} is high.",
            "name": "name",
            "proposal": "Add additional storage node to {{$labels.cluster}}",
            "severity": "warning"
          }
        ]
      }
    },
    "Sample": {
      "description": "A sample is a set of collected data from a particular source that has be reformatted\nand prepared for consumption. The sample data itself is stored in the filesystem.\n",
      "properties": {
        "id": {
          "description": "The sample id",
          "type": "string",
          "format": "uuid"
        },
        "meta": {
          "$ref": "#/definitions/JSONMap"
        },
        "type": {
          "$ref": "#/definitions/SourceType"
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "meta": {},
        "type": {}
      }
    },
    "Source": {
      "description": "A source is a telemetry source that provides stats and anlytics data in the autopilot csv format\n",
      "properties": {
        "config": {
          "$ref": "#/definitions/JSONMap"
        },
        "id": {
          "description": "The source id",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The source name",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SourceType"
        }
      },
      "example": {
        "config": {},
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "name": "name",
        "type": {}
      }
    },
    "SourceType": {
      "description": "sourceType:\n  * prometheus - a prometheus server\n",
      "type": "string",
      "enum": [
        "prometheus"
      ]
    },
    "Task": {
      "description": "A task is a scheduled operation in the engine\n",
      "properties": {
        "id": {
          "description": "The task id",
          "type": "string",
          "format": "uuid"
        },
        "params": {
          "description": "The parameters to pass to the source",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "run_at": {
          "description": "The timestamp the next execution of the task",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The task status",
          "type": "string",
          "enum": [
            "pending",
            "running",
            "succeeded",
            "failed"
          ]
        },
        "type": {
          "description": "The task type",
          "type": "string",
          "enum": [
            "collector",
            "recommender",
            "predictor"
          ]
        }
      },
      "example": {
        "id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "params": {
          "key": "{}"
        },
        "run_at": "2000-01-23T04:56:07.000+00:00",
        "status": "pending",
        "type": "collector"
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "BadRequest",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "invalid parameter"
        }
      }
    },
    "NotFound": {
      "description": "NotFound",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "object not found"
        }
      }
    },
    "ServerError": {
      "description": "ServerError",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "internal server error"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "message": "access denied"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`))
}
