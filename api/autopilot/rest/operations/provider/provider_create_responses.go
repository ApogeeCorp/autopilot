// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// ProviderCreateCreatedCode is the HTTP code returned for type ProviderCreateCreated
const ProviderCreateCreatedCode int = 201

/*ProviderCreateCreated Created

swagger:response providerCreateCreated
*/
type ProviderCreateCreated struct {

	/*
	  In: Body
	*/
	Payload *types.Provider `json:"body,omitempty"`
}

// NewProviderCreateCreated creates ProviderCreateCreated with default headers values
func NewProviderCreateCreated() *ProviderCreateCreated {

	return &ProviderCreateCreated{}
}

// WithPayload adds the payload to the provider create created response
func (o *ProviderCreateCreated) WithPayload(payload *types.Provider) *ProviderCreateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the provider create created response
func (o *ProviderCreateCreated) SetPayload(payload *types.Provider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProviderCreateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProviderCreateBadRequestCode is the HTTP code returned for type ProviderCreateBadRequest
const ProviderCreateBadRequestCode int = 400

/*ProviderCreateBadRequest BadRequest

swagger:response providerCreateBadRequest
*/
type ProviderCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewProviderCreateBadRequest creates ProviderCreateBadRequest with default headers values
func NewProviderCreateBadRequest() *ProviderCreateBadRequest {

	return &ProviderCreateBadRequest{}
}

// WithPayload adds the payload to the provider create bad request response
func (o *ProviderCreateBadRequest) WithPayload(payload *types.Error) *ProviderCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the provider create bad request response
func (o *ProviderCreateBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProviderCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProviderCreateInternalServerErrorCode is the HTTP code returned for type ProviderCreateInternalServerError
const ProviderCreateInternalServerErrorCode int = 500

/*ProviderCreateInternalServerError ServerError

swagger:response providerCreateInternalServerError
*/
type ProviderCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewProviderCreateInternalServerError creates ProviderCreateInternalServerError with default headers values
func NewProviderCreateInternalServerError() *ProviderCreateInternalServerError {

	return &ProviderCreateInternalServerError{}
}

// WithPayload adds the payload to the provider create internal server error response
func (o *ProviderCreateInternalServerError) WithPayload(payload *types.Error) *ProviderCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the provider create internal server error response
func (o *ProviderCreateInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProviderCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
