// Code generated by hiro; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"gitlab.com/ModelRocket/sparks/cloud/provider"
)

// ProviderCreateHandlerFunc turns a function with the right signature into a provider create handler
type ProviderCreateHandlerFunc func(ProviderCreateParams, provider.AuthToken) middleware.Responder

// Handle executing the request and returning a response
func (fn ProviderCreateHandlerFunc) Handle(params ProviderCreateParams, principal provider.AuthToken) middleware.Responder {
	return fn(params, principal)
}

// ProviderCreateHandler interface for that can handle valid provider create params
type ProviderCreateHandler interface {
	Handle(ProviderCreateParams, provider.AuthToken) middleware.Responder
}

// NewProviderCreate creates a new http.Handler for the provider create operation
func NewProviderCreate(ctx *middleware.Context, handler ProviderCreateHandler) *ProviderCreate {
	return &ProviderCreate{Context: ctx, Handler: handler}
}

/*ProviderCreate swagger:route POST /providers provider providerCreate

Create a new telemetry provider

Create a new telemetry provider from the provided definition

*/
type ProviderCreate struct {
	Context *middleware.Context
	Handler ProviderCreateHandler
}

func (o *ProviderCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProviderCreateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal provider.AuthToken
	if uprinc != nil {
		principal = uprinc.(provider.AuthToken) // this is really a provider.AuthToken, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
