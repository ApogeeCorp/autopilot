// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTaskGetParams creates a new TaskGetParams object
// no default values defined in spec.
func NewTaskGetParams() TaskGetParams {

	return TaskGetParams{}
}

// TaskGetParams contains all the bound params for the task get operation
// typically these are obtained from a http.Request
//
// swagger:parameters taskGet
type TaskGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The id of the task
	  Required: true
	  In: path
	*/
	TaskID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTaskGetParams() beforehand.
func (o *TaskGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rTaskID, rhkTaskID, _ := route.Params.GetOK("task_id")
	if err := o.bindTaskID(rTaskID, rhkTaskID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindTaskID binds and validates parameter TaskID from path.
func (o *TaskGetParams) bindTaskID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("task_id", "path", "strfmt.UUID", raw)
	}
	o.TaskID = *(value.(*strfmt.UUID))

	if err := o.validateTaskID(formats); err != nil {
		return err
	}

	return nil
}

// validateTaskID carries on validations for parameter TaskID
func (o *TaskGetParams) validateTaskID(formats strfmt.Registry) error {

	if err := validate.FormatOf("task_id", "path", "uuid", o.TaskID.String(), formats); err != nil {
		return err
	}
	return nil
}
