// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// TaskGetOKCode is the HTTP code returned for type TaskGetOK
const TaskGetOKCode int = 200

/*TaskGetOK OK

swagger:response taskGetOK
*/
type TaskGetOK struct {

	/*
	  In: Body
	*/
	Payload *types.Task `json:"body,omitempty"`
}

// NewTaskGetOK creates TaskGetOK with default headers values
func NewTaskGetOK() *TaskGetOK {

	return &TaskGetOK{}
}

// WithPayload adds the payload to the task get o k response
func (o *TaskGetOK) WithPayload(payload *types.Task) *TaskGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task get o k response
func (o *TaskGetOK) SetPayload(payload *types.Task) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TaskGetBadRequestCode is the HTTP code returned for type TaskGetBadRequest
const TaskGetBadRequestCode int = 400

/*TaskGetBadRequest BadRequest

swagger:response taskGetBadRequest
*/
type TaskGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewTaskGetBadRequest creates TaskGetBadRequest with default headers values
func NewTaskGetBadRequest() *TaskGetBadRequest {

	return &TaskGetBadRequest{}
}

// WithPayload adds the payload to the task get bad request response
func (o *TaskGetBadRequest) WithPayload(payload *types.Error) *TaskGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task get bad request response
func (o *TaskGetBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TaskGetNotFoundCode is the HTTP code returned for type TaskGetNotFound
const TaskGetNotFoundCode int = 404

/*TaskGetNotFound NotFound

swagger:response taskGetNotFound
*/
type TaskGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewTaskGetNotFound creates TaskGetNotFound with default headers values
func NewTaskGetNotFound() *TaskGetNotFound {

	return &TaskGetNotFound{}
}

// WithPayload adds the payload to the task get not found response
func (o *TaskGetNotFound) WithPayload(payload *types.Error) *TaskGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task get not found response
func (o *TaskGetNotFound) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TaskGetInternalServerErrorCode is the HTTP code returned for type TaskGetInternalServerError
const TaskGetInternalServerErrorCode int = 500

/*TaskGetInternalServerError ServerError

swagger:response taskGetInternalServerError
*/
type TaskGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewTaskGetInternalServerError creates TaskGetInternalServerError with default headers values
func NewTaskGetInternalServerError() *TaskGetInternalServerError {

	return &TaskGetInternalServerError{}
}

// WithPayload adds the payload to the task get internal server error response
func (o *TaskGetInternalServerError) WithPayload(payload *types.Error) *TaskGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task get internal server error response
func (o *TaskGetInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
