// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// RuleGetOKCode is the HTTP code returned for type RuleGetOK
const RuleGetOKCode int = 200

/*RuleGetOK OK

swagger:response ruleGetOK
*/
type RuleGetOK struct {

	/*
	  In: Body
	*/
	Payload *types.Rule `json:"body,omitempty"`
}

// NewRuleGetOK creates RuleGetOK with default headers values
func NewRuleGetOK() *RuleGetOK {

	return &RuleGetOK{}
}

// WithPayload adds the payload to the rule get o k response
func (o *RuleGetOK) WithPayload(payload *types.Rule) *RuleGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rule get o k response
func (o *RuleGetOK) SetPayload(payload *types.Rule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RuleGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RuleGetBadRequestCode is the HTTP code returned for type RuleGetBadRequest
const RuleGetBadRequestCode int = 400

/*RuleGetBadRequest BadRequest

swagger:response ruleGetBadRequest
*/
type RuleGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewRuleGetBadRequest creates RuleGetBadRequest with default headers values
func NewRuleGetBadRequest() *RuleGetBadRequest {

	return &RuleGetBadRequest{}
}

// WithPayload adds the payload to the rule get bad request response
func (o *RuleGetBadRequest) WithPayload(payload *types.Error) *RuleGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rule get bad request response
func (o *RuleGetBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RuleGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RuleGetNotFoundCode is the HTTP code returned for type RuleGetNotFound
const RuleGetNotFoundCode int = 404

/*RuleGetNotFound NotFound

swagger:response ruleGetNotFound
*/
type RuleGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewRuleGetNotFound creates RuleGetNotFound with default headers values
func NewRuleGetNotFound() *RuleGetNotFound {

	return &RuleGetNotFound{}
}

// WithPayload adds the payload to the rule get not found response
func (o *RuleGetNotFound) WithPayload(payload *types.Error) *RuleGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rule get not found response
func (o *RuleGetNotFound) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RuleGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RuleGetInternalServerErrorCode is the HTTP code returned for type RuleGetInternalServerError
const RuleGetInternalServerErrorCode int = 500

/*RuleGetInternalServerError ServerError

swagger:response ruleGetInternalServerError
*/
type RuleGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewRuleGetInternalServerError creates RuleGetInternalServerError with default headers values
func NewRuleGetInternalServerError() *RuleGetInternalServerError {

	return &RuleGetInternalServerError{}
}

// WithPayload adds the payload to the rule get internal server error response
func (o *RuleGetInternalServerError) WithPayload(payload *types.Error) *RuleGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rule get internal server error response
func (o *RuleGetInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RuleGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
