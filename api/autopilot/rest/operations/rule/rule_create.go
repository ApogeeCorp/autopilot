// Code generated by hiro; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RuleCreateHandlerFunc turns a function with the right signature into a rule create handler
type RuleCreateHandlerFunc func(RuleCreateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn RuleCreateHandlerFunc) Handle(params RuleCreateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// RuleCreateHandler interface for that can handle valid rule create params
type RuleCreateHandler interface {
	Handle(RuleCreateParams, interface{}) middleware.Responder
}

// NewRuleCreate creates a new http.Handler for the rule create operation
func NewRuleCreate(ctx *middleware.Context, handler RuleCreateHandler) *RuleCreate {
	return &RuleCreate{Context: ctx, Handler: handler}
}

/*RuleCreate swagger:route POST /rules rule ruleCreate

Create a new telemetry rule

Create a new telemetry rule from the provided definition

*/
type RuleCreate struct {
	Context *middleware.Context
	Handler RuleCreateHandler
}

func (o *RuleCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRuleCreateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
