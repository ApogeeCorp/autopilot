// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// CollectorPollCreatedCode is the HTTP code returned for type CollectorPollCreated
const CollectorPollCreatedCode int = 201

/*CollectorPollCreated No Content

swagger:response collectorPollCreated
*/
type CollectorPollCreated struct {
}

// NewCollectorPollCreated creates CollectorPollCreated with default headers values
func NewCollectorPollCreated() *CollectorPollCreated {

	return &CollectorPollCreated{}
}

// WriteResponse to the client
func (o *CollectorPollCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CollectorPollInternalServerErrorCode is the HTTP code returned for type CollectorPollInternalServerError
const CollectorPollInternalServerErrorCode int = 500

/*CollectorPollInternalServerError ServerError

swagger:response collectorPollInternalServerError
*/
type CollectorPollInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewCollectorPollInternalServerError creates CollectorPollInternalServerError with default headers values
func NewCollectorPollInternalServerError() *CollectorPollInternalServerError {

	return &CollectorPollInternalServerError{}
}

// WithPayload adds the payload to the collector poll internal server error response
func (o *CollectorPollInternalServerError) WithPayload(payload *types.Error) *CollectorPollInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collector poll internal server error response
func (o *CollectorPollInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectorPollInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
