// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRecommendationsGetParams creates a new RecommendationsGetParams object
// no default values defined in spec.
func NewRecommendationsGetParams() RecommendationsGetParams {

	return RecommendationsGetParams{}
}

// RecommendationsGetParams contains all the bound params for the recommendations get operation
// typically these are obtained from a http.Request
//
// swagger:parameters recommendationsGet
type RecommendationsGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*the provider name
	  Required: true
	  In: path
	*/
	Provider string
	/*The pre-defined rules to apply
	  In: query
	  Collection Format: csv
	*/
	Rules []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRecommendationsGetParams() beforehand.
func (o *RecommendationsGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rProvider, rhkProvider, _ := route.Params.GetOK("provider")
	if err := o.bindProvider(rProvider, rhkProvider, route.Formats); err != nil {
		res = append(res, err)
	}

	qRules, qhkRules, _ := qs.GetOK("rules")
	if err := o.bindRules(qRules, qhkRules, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindProvider binds and validates parameter Provider from path.
func (o *RecommendationsGetParams) bindProvider(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Provider = raw

	return nil
}

// bindRules binds and validates array parameter Rules from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *RecommendationsGetParams) bindRules(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvRules string
	if len(rawData) > 0 {
		qvRules = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	rulesIC := swag.SplitByFormat(qvRules, "csv")
	if len(rulesIC) == 0 {
		return nil
	}

	var rulesIR []string
	for _, rulesIV := range rulesIC {
		rulesI := rulesIV

		rulesIR = append(rulesIR, rulesI)
	}

	o.Rules = rulesIR

	return nil
}
