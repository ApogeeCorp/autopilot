// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package sample

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// SampleCreateOKCode is the HTTP code returned for type SampleCreateOK
const SampleCreateOKCode int = 200

/*SampleCreateOK OK

swagger:response sampleCreateOK
*/
type SampleCreateOK struct {

	/*
	  In: Body
	*/
	Payload []*types.Recommendation `json:"body,omitempty"`
}

// NewSampleCreateOK creates SampleCreateOK with default headers values
func NewSampleCreateOK() *SampleCreateOK {

	return &SampleCreateOK{}
}

// WithPayload adds the payload to the sample create o k response
func (o *SampleCreateOK) WithPayload(payload []*types.Recommendation) *SampleCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sample create o k response
func (o *SampleCreateOK) SetPayload(payload []*types.Recommendation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SampleCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*types.Recommendation, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// SampleCreateBadRequestCode is the HTTP code returned for type SampleCreateBadRequest
const SampleCreateBadRequestCode int = 400

/*SampleCreateBadRequest BadRequest

swagger:response sampleCreateBadRequest
*/
type SampleCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSampleCreateBadRequest creates SampleCreateBadRequest with default headers values
func NewSampleCreateBadRequest() *SampleCreateBadRequest {

	return &SampleCreateBadRequest{}
}

// WithPayload adds the payload to the sample create bad request response
func (o *SampleCreateBadRequest) WithPayload(payload *types.Error) *SampleCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sample create bad request response
func (o *SampleCreateBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SampleCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SampleCreateInternalServerErrorCode is the HTTP code returned for type SampleCreateInternalServerError
const SampleCreateInternalServerErrorCode int = 500

/*SampleCreateInternalServerError ServerError

swagger:response sampleCreateInternalServerError
*/
type SampleCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSampleCreateInternalServerError creates SampleCreateInternalServerError with default headers values
func NewSampleCreateInternalServerError() *SampleCreateInternalServerError {

	return &SampleCreateInternalServerError{}
}

// WithPayload adds the payload to the sample create internal server error response
func (o *SampleCreateInternalServerError) WithPayload(payload *types.Error) *SampleCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sample create internal server error response
func (o *SampleCreateInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SampleCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
