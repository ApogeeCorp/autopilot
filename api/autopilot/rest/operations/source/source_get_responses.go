// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// SourceGetOKCode is the HTTP code returned for type SourceGetOK
const SourceGetOKCode int = 200

/*SourceGetOK OK

swagger:response sourceGetOK
*/
type SourceGetOK struct {

	/*
	  In: Body
	*/
	Payload *types.Source `json:"body,omitempty"`
}

// NewSourceGetOK creates SourceGetOK with default headers values
func NewSourceGetOK() *SourceGetOK {

	return &SourceGetOK{}
}

// WithPayload adds the payload to the source get o k response
func (o *SourceGetOK) WithPayload(payload *types.Source) *SourceGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source get o k response
func (o *SourceGetOK) SetPayload(payload *types.Source) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SourceGetBadRequestCode is the HTTP code returned for type SourceGetBadRequest
const SourceGetBadRequestCode int = 400

/*SourceGetBadRequest BadRequest

swagger:response sourceGetBadRequest
*/
type SourceGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSourceGetBadRequest creates SourceGetBadRequest with default headers values
func NewSourceGetBadRequest() *SourceGetBadRequest {

	return &SourceGetBadRequest{}
}

// WithPayload adds the payload to the source get bad request response
func (o *SourceGetBadRequest) WithPayload(payload *types.Error) *SourceGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source get bad request response
func (o *SourceGetBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SourceGetNotFoundCode is the HTTP code returned for type SourceGetNotFound
const SourceGetNotFoundCode int = 404

/*SourceGetNotFound NotFound

swagger:response sourceGetNotFound
*/
type SourceGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSourceGetNotFound creates SourceGetNotFound with default headers values
func NewSourceGetNotFound() *SourceGetNotFound {

	return &SourceGetNotFound{}
}

// WithPayload adds the payload to the source get not found response
func (o *SourceGetNotFound) WithPayload(payload *types.Error) *SourceGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source get not found response
func (o *SourceGetNotFound) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SourceGetInternalServerErrorCode is the HTTP code returned for type SourceGetInternalServerError
const SourceGetInternalServerErrorCode int = 500

/*SourceGetInternalServerError ServerError

swagger:response sourceGetInternalServerError
*/
type SourceGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSourceGetInternalServerError creates SourceGetInternalServerError with default headers values
func NewSourceGetInternalServerError() *SourceGetInternalServerError {

	return &SourceGetInternalServerError{}
}

// WithPayload adds the payload to the source get internal server error response
func (o *SourceGetInternalServerError) WithPayload(payload *types.Error) *SourceGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source get internal server error response
func (o *SourceGetInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
