// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// SourceCreateCreatedCode is the HTTP code returned for type SourceCreateCreated
const SourceCreateCreatedCode int = 201

/*SourceCreateCreated Created

swagger:response sourceCreateCreated
*/
type SourceCreateCreated struct {

	/*
	  In: Body
	*/
	Payload *types.Source `json:"body,omitempty"`
}

// NewSourceCreateCreated creates SourceCreateCreated with default headers values
func NewSourceCreateCreated() *SourceCreateCreated {

	return &SourceCreateCreated{}
}

// WithPayload adds the payload to the source create created response
func (o *SourceCreateCreated) WithPayload(payload *types.Source) *SourceCreateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source create created response
func (o *SourceCreateCreated) SetPayload(payload *types.Source) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceCreateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SourceCreateBadRequestCode is the HTTP code returned for type SourceCreateBadRequest
const SourceCreateBadRequestCode int = 400

/*SourceCreateBadRequest BadRequest

swagger:response sourceCreateBadRequest
*/
type SourceCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSourceCreateBadRequest creates SourceCreateBadRequest with default headers values
func NewSourceCreateBadRequest() *SourceCreateBadRequest {

	return &SourceCreateBadRequest{}
}

// WithPayload adds the payload to the source create bad request response
func (o *SourceCreateBadRequest) WithPayload(payload *types.Error) *SourceCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source create bad request response
func (o *SourceCreateBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SourceCreateInternalServerErrorCode is the HTTP code returned for type SourceCreateInternalServerError
const SourceCreateInternalServerErrorCode int = 500

/*SourceCreateInternalServerError ServerError

swagger:response sourceCreateInternalServerError
*/
type SourceCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewSourceCreateInternalServerError creates SourceCreateInternalServerError with default headers values
func NewSourceCreateInternalServerError() *SourceCreateInternalServerError {

	return &SourceCreateInternalServerError{}
}

// WithPayload adds the payload to the source create internal server error response
func (o *SourceCreateInternalServerError) WithPayload(payload *types.Error) *SourceCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the source create internal server error response
func (o *SourceCreateInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SourceCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
