// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// NewSourceCreateParams creates a new SourceCreateParams object
// no default values defined in spec.
func NewSourceCreateParams() SourceCreateParams {

	return SourceCreateParams{}
}

// SourceCreateParams contains all the bound params for the source create operation
// typically these are obtained from a http.Request
//
// swagger:parameters sourceCreate
type SourceCreateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The source to create
	  Required: true
	  In: body
	*/
	Source *types.Source
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSourceCreateParams() beforehand.
func (o *SourceCreateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body types.Source
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("source", "body"))
			} else {
				res = append(res, errors.NewParseError("source", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Source = &body
			}
		}
	} else {
		res = append(res, errors.Required("source", "body"))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
