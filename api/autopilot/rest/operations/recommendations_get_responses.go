// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// RecommendationsGetOKCode is the HTTP code returned for type RecommendationsGetOK
const RecommendationsGetOKCode int = 200

/*RecommendationsGetOK OK

swagger:response recommendationsGetOK
*/
type RecommendationsGetOK struct {

	/*
	  In: Body
	*/
	Payload []*types.Recommendation `json:"body,omitempty"`
}

// NewRecommendationsGetOK creates RecommendationsGetOK with default headers values
func NewRecommendationsGetOK() *RecommendationsGetOK {

	return &RecommendationsGetOK{}
}

// WithPayload adds the payload to the recommendations get o k response
func (o *RecommendationsGetOK) WithPayload(payload []*types.Recommendation) *RecommendationsGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recommendations get o k response
func (o *RecommendationsGetOK) SetPayload(payload []*types.Recommendation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecommendationsGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*types.Recommendation, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// RecommendationsGetBadRequestCode is the HTTP code returned for type RecommendationsGetBadRequest
const RecommendationsGetBadRequestCode int = 400

/*RecommendationsGetBadRequest BadRequest

swagger:response recommendationsGetBadRequest
*/
type RecommendationsGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewRecommendationsGetBadRequest creates RecommendationsGetBadRequest with default headers values
func NewRecommendationsGetBadRequest() *RecommendationsGetBadRequest {

	return &RecommendationsGetBadRequest{}
}

// WithPayload adds the payload to the recommendations get bad request response
func (o *RecommendationsGetBadRequest) WithPayload(payload *types.Error) *RecommendationsGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recommendations get bad request response
func (o *RecommendationsGetBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecommendationsGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecommendationsGetInternalServerErrorCode is the HTTP code returned for type RecommendationsGetInternalServerError
const RecommendationsGetInternalServerErrorCode int = 500

/*RecommendationsGetInternalServerError ServerError

swagger:response recommendationsGetInternalServerError
*/
type RecommendationsGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewRecommendationsGetInternalServerError creates RecommendationsGetInternalServerError with default headers values
func NewRecommendationsGetInternalServerError() *RecommendationsGetInternalServerError {

	return &RecommendationsGetInternalServerError{}
}

// WithPayload adds the payload to the recommendations get internal server error response
func (o *RecommendationsGetInternalServerError) WithPayload(payload *types.Error) *RecommendationsGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recommendations get internal server error response
func (o *RecommendationsGetInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecommendationsGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
