// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProviderQueryParams creates a new ProviderQueryParams object
// no default values defined in spec.
func NewProviderQueryParams() ProviderQueryParams {

	return ProviderQueryParams{}
}

// ProviderQueryParams contains all the bound params for the provider query operation
// typically these are obtained from a http.Request
//
// swagger:parameters providerQuery
type ProviderQueryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	EndDate *strfmt.DateTime
	/*the provider name
	  Required: true
	  In: path
	*/
	Provider string
	/*
	  In: query
	*/
	Query *string
	/*
	  In: query
	*/
	StartDate *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewProviderQueryParams() beforehand.
func (o *ProviderQueryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndDate, qhkEndDate, _ := qs.GetOK("end_date")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	rProvider, rhkProvider, _ := route.Params.GetOK("provider")
	if err := o.bindProvider(rProvider, rhkProvider, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuery, qhkQuery, _ := qs.GetOK("query")
	if err := o.bindQuery(qQuery, qhkQuery, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("start_date")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *ProviderQueryParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("end_date", "query", "strfmt.DateTime", raw)
	}
	o.EndDate = (value.(*strfmt.DateTime))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *ProviderQueryParams) validateEndDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("end_date", "query", "date-time", o.EndDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindProvider binds and validates parameter Provider from path.
func (o *ProviderQueryParams) bindProvider(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Provider = raw

	return nil
}

// bindQuery binds and validates parameter Query from query.
func (o *ProviderQueryParams) bindQuery(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Query = &raw

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *ProviderQueryParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("start_date", "query", "strfmt.DateTime", raw)
	}
	o.StartDate = (value.(*strfmt.DateTime))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *ProviderQueryParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("start_date", "query", "date-time", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}
