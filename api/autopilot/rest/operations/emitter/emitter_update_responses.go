// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package emitter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// EmitterUpdateNoContentCode is the HTTP code returned for type EmitterUpdateNoContent
const EmitterUpdateNoContentCode int = 204

/*EmitterUpdateNoContent No Content

swagger:response emitterUpdateNoContent
*/
type EmitterUpdateNoContent struct {
}

// NewEmitterUpdateNoContent creates EmitterUpdateNoContent with default headers values
func NewEmitterUpdateNoContent() *EmitterUpdateNoContent {

	return &EmitterUpdateNoContent{}
}

// WriteResponse to the client
func (o *EmitterUpdateNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// EmitterUpdateBadRequestCode is the HTTP code returned for type EmitterUpdateBadRequest
const EmitterUpdateBadRequestCode int = 400

/*EmitterUpdateBadRequest BadRequest

swagger:response emitterUpdateBadRequest
*/
type EmitterUpdateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterUpdateBadRequest creates EmitterUpdateBadRequest with default headers values
func NewEmitterUpdateBadRequest() *EmitterUpdateBadRequest {

	return &EmitterUpdateBadRequest{}
}

// WithPayload adds the payload to the emitter update bad request response
func (o *EmitterUpdateBadRequest) WithPayload(payload *types.Error) *EmitterUpdateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter update bad request response
func (o *EmitterUpdateBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterUpdateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterUpdateInternalServerErrorCode is the HTTP code returned for type EmitterUpdateInternalServerError
const EmitterUpdateInternalServerErrorCode int = 500

/*EmitterUpdateInternalServerError ServerError

swagger:response emitterUpdateInternalServerError
*/
type EmitterUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterUpdateInternalServerError creates EmitterUpdateInternalServerError with default headers values
func NewEmitterUpdateInternalServerError() *EmitterUpdateInternalServerError {

	return &EmitterUpdateInternalServerError{}
}

// WithPayload adds the payload to the emitter update internal server error response
func (o *EmitterUpdateInternalServerError) WithPayload(payload *types.Error) *EmitterUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter update internal server error response
func (o *EmitterUpdateInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
