// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package emitter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// EmitterGetOKCode is the HTTP code returned for type EmitterGetOK
const EmitterGetOKCode int = 200

/*EmitterGetOK OK

swagger:response emitterGetOK
*/
type EmitterGetOK struct {

	/*
	  In: Body
	*/
	Payload *types.Emitter `json:"body,omitempty"`
}

// NewEmitterGetOK creates EmitterGetOK with default headers values
func NewEmitterGetOK() *EmitterGetOK {

	return &EmitterGetOK{}
}

// WithPayload adds the payload to the emitter get o k response
func (o *EmitterGetOK) WithPayload(payload *types.Emitter) *EmitterGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter get o k response
func (o *EmitterGetOK) SetPayload(payload *types.Emitter) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterGetBadRequestCode is the HTTP code returned for type EmitterGetBadRequest
const EmitterGetBadRequestCode int = 400

/*EmitterGetBadRequest BadRequest

swagger:response emitterGetBadRequest
*/
type EmitterGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterGetBadRequest creates EmitterGetBadRequest with default headers values
func NewEmitterGetBadRequest() *EmitterGetBadRequest {

	return &EmitterGetBadRequest{}
}

// WithPayload adds the payload to the emitter get bad request response
func (o *EmitterGetBadRequest) WithPayload(payload *types.Error) *EmitterGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter get bad request response
func (o *EmitterGetBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterGetNotFoundCode is the HTTP code returned for type EmitterGetNotFound
const EmitterGetNotFoundCode int = 404

/*EmitterGetNotFound NotFound

swagger:response emitterGetNotFound
*/
type EmitterGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterGetNotFound creates EmitterGetNotFound with default headers values
func NewEmitterGetNotFound() *EmitterGetNotFound {

	return &EmitterGetNotFound{}
}

// WithPayload adds the payload to the emitter get not found response
func (o *EmitterGetNotFound) WithPayload(payload *types.Error) *EmitterGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter get not found response
func (o *EmitterGetNotFound) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterGetInternalServerErrorCode is the HTTP code returned for type EmitterGetInternalServerError
const EmitterGetInternalServerErrorCode int = 500

/*EmitterGetInternalServerError ServerError

swagger:response emitterGetInternalServerError
*/
type EmitterGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterGetInternalServerError creates EmitterGetInternalServerError with default headers values
func NewEmitterGetInternalServerError() *EmitterGetInternalServerError {

	return &EmitterGetInternalServerError{}
}

// WithPayload adds the payload to the emitter get internal server error response
func (o *EmitterGetInternalServerError) WithPayload(payload *types.Error) *EmitterGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter get internal server error response
func (o *EmitterGetInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
