// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package emitter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	types "github.com/libopenstorage/autopilot/api/autopilot/types"
)

// EmitterCreateCreatedCode is the HTTP code returned for type EmitterCreateCreated
const EmitterCreateCreatedCode int = 201

/*EmitterCreateCreated Created

swagger:response emitterCreateCreated
*/
type EmitterCreateCreated struct {

	/*
	  In: Body
	*/
	Payload *types.Emitter `json:"body,omitempty"`
}

// NewEmitterCreateCreated creates EmitterCreateCreated with default headers values
func NewEmitterCreateCreated() *EmitterCreateCreated {

	return &EmitterCreateCreated{}
}

// WithPayload adds the payload to the emitter create created response
func (o *EmitterCreateCreated) WithPayload(payload *types.Emitter) *EmitterCreateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter create created response
func (o *EmitterCreateCreated) SetPayload(payload *types.Emitter) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterCreateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterCreateBadRequestCode is the HTTP code returned for type EmitterCreateBadRequest
const EmitterCreateBadRequestCode int = 400

/*EmitterCreateBadRequest BadRequest

swagger:response emitterCreateBadRequest
*/
type EmitterCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterCreateBadRequest creates EmitterCreateBadRequest with default headers values
func NewEmitterCreateBadRequest() *EmitterCreateBadRequest {

	return &EmitterCreateBadRequest{}
}

// WithPayload adds the payload to the emitter create bad request response
func (o *EmitterCreateBadRequest) WithPayload(payload *types.Error) *EmitterCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter create bad request response
func (o *EmitterCreateBadRequest) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EmitterCreateInternalServerErrorCode is the HTTP code returned for type EmitterCreateInternalServerError
const EmitterCreateInternalServerErrorCode int = 500

/*EmitterCreateInternalServerError ServerError

swagger:response emitterCreateInternalServerError
*/
type EmitterCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *types.Error `json:"body,omitempty"`
}

// NewEmitterCreateInternalServerError creates EmitterCreateInternalServerError with default headers values
func NewEmitterCreateInternalServerError() *EmitterCreateInternalServerError {

	return &EmitterCreateInternalServerError{}
}

// WithPayload adds the payload to the emitter create internal server error response
func (o *EmitterCreateInternalServerError) WithPayload(payload *types.Error) *EmitterCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the emitter create internal server error response
func (o *EmitterCreateInternalServerError) SetPayload(payload *types.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EmitterCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
