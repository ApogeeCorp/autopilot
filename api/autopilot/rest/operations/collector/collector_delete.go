// Code generated by hiro; DO NOT EDIT.

// Copyright 2018 Portworx Inc. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file at the
// root of this project.

package collector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"gitlab.com/ModelRocket/sparks/cloud/provider"
)

// CollectorDeleteHandlerFunc turns a function with the right signature into a collector delete handler
type CollectorDeleteHandlerFunc func(CollectorDeleteParams, provider.AuthToken) middleware.Responder

// Handle executing the request and returning a response
func (fn CollectorDeleteHandlerFunc) Handle(params CollectorDeleteParams, principal provider.AuthToken) middleware.Responder {
	return fn(params, principal)
}

// CollectorDeleteHandler interface for that can handle valid collector delete params
type CollectorDeleteHandler interface {
	Handle(CollectorDeleteParams, provider.AuthToken) middleware.Responder
}

// NewCollectorDelete creates a new http.Handler for the collector delete operation
func NewCollectorDelete(ctx *middleware.Context, handler CollectorDeleteHandler) *CollectorDelete {
	return &CollectorDelete{Context: ctx, Handler: handler}
}

/*CollectorDelete swagger:route DELETE /collectors/{collector_id} collector collectorDelete

Get a list of telemetry collectors

Returns the request collected object

*/
type CollectorDelete struct {
	Context *middleware.Context
	Handler CollectorDeleteHandler
}

func (o *CollectorDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCollectorDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal provider.AuthToken
	if uprinc != nil {
		principal = uprinc.(provider.AuthToken) // this is really a provider.AuthToken, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
